# from pixel mssg

# Load the ModSecurity module (main context)
load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;

# Events block for connection handling
events {
    worker_connections 1024;
}

http {
    # Existing upstreams
    upstream backend {
        server backend:80;
    }
    upstream frontend {
        server frontend:80;
    }

    # Rate limiting zone definition
    limit_req_zone $binary_remote_addr zone=rate_limit:10m rate=100r/s;

    # Connection limiting zone definition
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Map for WebSocket upgrade
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Custom error pages - redirect to /404
    error_page 404 /404;
    error_page 403 /404;
    error_page 405 /404;
    error_page 500 502 503 504 /404;

    # server {
    #     listen 80;
    #     listen [::]:80;
    #     server_name localhost;
        
    #     # Redirect all HTTP requests to HTTPS
    #     return 301 https://$host$request_uri;
    # }
    # Existing server block for HTTPS
    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/transc.crt;
        ssl_certificate_key /etc/nginx/ssl/transc.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;
        ssl_session_tickets off;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header X-Frame-Options "SAMEORIGIN";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        client_max_body_size 5M;
        limit_req zone=rate_limit burst=25 nodelay;
        limit_conn addr 10;

        # Handle invalid methods
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$) {
            return 405;
        }

        # Updated dotfile block to explicitly redirect to /404
        location ~ /\. {
            deny all;
            rewrite ^ /404 permanent;  # Redirects to frontend's 404 page
        }
		
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /game {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Cookie $http_cookie;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /api {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Cookie $http_cookie;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        # Updated media files location block
        location /media/ {
            alias /files/media/;  # Make sure it matches MEDIA_ROOT
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri =404;
        }
                # location /media/ {
        #     alias /app/backend/media/;
        #     expires 30d;
        #     add_header Cache-Control "public, no-transform";
        #     try_files $uri $uri/ @media_fallback;  # Use named location for errors
            
        #     # Security headers for media files
        #     add_header X-Content-Type-Options "nosniff";
        #     add_header X-Frame-Options "SAMEORIGIN";
            
        #     # Allow only specific file types
        #     location ~* \.(jpg|jpeg|png|gif|ico|webp)$ {
        #         try_files $uri @media_fallback;  # Use named location for errors
        #     }
        # }

        # Named location for media errors
        # location @media_fallback {
        #     rewrite ^ /404 permanent;  # Redirects to frontend's 404 page
        # }

        # Explicit 404 handler
        # Custom error pages - redirect to /404
        error_page 404 /404;
        error_page 403 /404;
        error_page 405 /404;
        error_page 500 502 503 504 /404;

        location = /404 {
            proxy_pass http://frontend/;  # No /404, let the SPA handle it
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Cookie $http_cookie;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }

    # Server block for HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name localhost;
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }
}